Modifying the function signature in this way would not be a problem if we didnt need to modify the head of the List. If we are passed a head pointer where head->value is greater that newValue, then we must mofify the list so that the new node referencing newValue should be the new head. with a void return in the signature we cannot modify the head that the user is referencing as such, since parameters in functions in C/C++ are passed by value.
If we wanted to keep the void return in the signature, we could make a struct OrderedList with an initialiser function which initialises an OrderedList with first node head->value = INT_MIN from <limits.h>, so that we are sure that this first 'placeholder' node will always be head. Then we never have to modify the head of the OrderedList.
Alternatively we could make the first parameter Node **head, which is a poiter to the pointer to head. In that way, we can access head through the pointer to its pointer, and modify head in place.
